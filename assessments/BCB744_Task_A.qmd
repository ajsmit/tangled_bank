---
title: "BCB744 Task A"
format: html
params: 
  hide_answers: false
---

# [[Assessment Sheet](BCB744_Task_A_Surname.xlsx)]{.my-highlight} {#sec-assessment}

# 1. R and RStudio

## Question 1

Why will I get annoyed when you say in your Methods section of your paper that you used RStudio for your analysis? **(/1)**

`r if (params$hide_answers) "::: {.content-hidden}"`

**Answer**

- ✓ I will get annoyed because RStudio is not a statistical computing software -- it is an integrated development environment (IDE) for R. Stating in a Methods section that an analysis was conducted in “RStudio” conflates the software used for computation (R) with the interface used to interact with it (RStudio).

- Further, reporting the actual software and package versions used is important for reproducibility. Stating “RStudio” obscures the fact that R (the statistical language) is what executes the computations, and RStudio is just a tool that provides a user-friendly interface with features such as script editing, debugging, and visualisation conveniences.

- A proper citation in the Methods section should explicitly reference R (with its version number) and any relevant packages that were integral to the analysis. For example:

> “All analyses were conducted in R (v4.3.1; R Core Team, 2023) using the packages **brms**, **ggplot2**, and **tidyverse**.”

- You can find the version number of R with the command `citation()`. Similarly, the citation for, say, **ggplot2** can be found with `citation("ggplot2)`.

- Mentioning RStudio may be acceptable in passing if there is a specific reason, such as explaining how code was executed (e.g., using RMarkdown or Quarto within RStudio). However, in general, RStudio itself does not perform any computations, making its inclusion misleading and, to someone who cares about precision in computational reporting, annoying.

`r if (params$hide_answers) ":::"`

## Question 2

Why is it best practice to include packages you use in your R program explicitly? **(/3)**

`r if (params$hide_answers) "::: {.content-hidden}"`

**Answer**

✓ Explicitly specifying R packages in your scripts ensures reproducibility, transparency, debugging efficiency, and dependency management. Consequently, you make your code robust (less prone to failure), interpretable (easy for others to read and understand), and easily executable across different environments (different people's computers, or different kinds of operating systems).

`r if (params$hide_answers) ":::"`

## Question 3

What are the values after each hashed statement in the following? **(/3)**

```{r, eval = FALSE}
mass <- 48 
mass <- mass * 2.0 # mass? 
age <- 42
age <- age - 17 # age?
mass_index <- mass / age # mass_index?
``` 

`r if (params$hide_answers) "::: {.content-hidden}"`

**Answer**

```{r, eval = TRUE}
mass <- 48 
mass <- mass * 2.0 # mass? 
mass # ✓
age <- 42
age <- age - 17 # age?
age # ✓
mass_index <- mass / age # mass_index?
mass_index # ✓
``` 

`r if (params$hide_answers) ":::"`

## Question 4

Use R to calculate some simple mathematical expressions. Assign the value of `40` to `x` and assign the value of `23` to `y`. Make `z` the value of `x - y` Display `z` in the console. **(/3)**

`r if (params$hide_answers) "::: {.content-hidden}"`

**Answer**

```{r, eval = TRUE}
x <- 40
y <- 23
z <- x - y
z  # ✓ x 3
```

`r if (params$hide_answers) ":::"`

## Question 5

Explain what this code does (below). What have you learned about writing code, and how would you apply what you have learned in the future? When would one want to use the `round()` function? Name a few example use cases. **(/4)**

```{r, eval = FALSE}
round(sd(apples), 2)
```

`r if (params$hide_answers) "::: {.content-hidden}"`

**Answer**

- ✓ The `round()` function in R is used to round a numeric value to a specified number of decimal places. In this code snippet, the `round()` function is applied to the standard deviation of a numeric vector called `apples`. The second argument to `round()` is `2`, which specifies that the standard deviation should be rounded to two decimal places.
- ✓ This function highlights the importance of precision in numerical computations. Functions like `round()` are useful for data presentation, statistical reporting, and computational accuracy because they allow one to control the level of numerical detail in outputs, which is important in exploratory analysis and final reporting.
- ✓ Using functions with clear, well-defined arguments (like specifying digits) improves code readability and reproducibility.
- ✓ We also learned that we can nest function within one-another. Here, `sd()` is nested within `round()` to round the standard deviation to two decimal places.

`r if (params$hide_answers) ":::"`

# 2. Working with Data and Code

## Question 6

What is the difference between an Excel file and a CSV file? **(/2)**

`r if (params$hide_answers) "::: {.content-hidden}"`

**Answer**

- ✓ **Excel File**: An Excel file is a proprietary file format used by Microsoft Excel to store data in a structured manner. It can contain multiple sheets, formulas, figures, and other features. Excel files are typically saved with the extension `.xlsx` (for newer versions) or `.xls` (for older versions). They are not plain text files and require specific software (like Excel) to open and edit.
- ✓ **CSV File**: A CSV (Comma-Separated Values) file is a plain text file that stores tabular data in a simple format. Each line in a CSV file represents a row in the table, and columns are separated by commas (or sometime semi-colons). CSV files are human-readable and can be opened with any text editor or spreadsheet software. They are commonly used for data exchange between different programs and systems.

`r if (params$hide_answers) ":::"`

## Question 7

What is the difference between a CSV and TSV file? **(/2)**

`r if (params$hide_answers) "::: {.content-hidden}"`

**Answer**

- ✓ **CSV File**: A CSV (Comma-Separated Values) file is a plain text file that stores tabular data in a simple format. Each line in a CSV file represents a row in the table, and columns are separated by commas. CSV files are human-readable and can be opened with any text editor or spreadsheet software.
- ✓ **TSV File**: A TSV (Tab-Separated Values) file is similar to a CSV file, but instead of using commas to separate columns, it uses tabs. Each line in a TSV file represents a row in the table, and columns are separated by tabs. TSV files are also human-readable and can be opened with any text editor or spreadsheet software.

`r if (params$hide_answers) ":::"`

## Question 8

Why is it important to see the file extension when working with data files? **(/2)**

`r if (params$hide_answers) "::: {.content-hidden}"`

**Answer**

- ✓ File extensions are important because they provide information about the type of file and the software that can be used to open it. For example, `.csv` indicates a CSV file that can be opened with spreadsheet software or text editors, while `.xlsx` indicates an Excel file that requires Microsoft Excel to open.
- ✓ Knowing the file extension helps in selecting the appropriate software to open the file, avoiding compatibility issues, and ensuring that the file is opened correctly. It also helps in identifying the file type quickly, especially when dealing with multiple files or file formats.

`r if (params$hide_answers) ":::"`

# 3. Data Classes and Structures in R

## Question 9

Using examples (new data), explain how the `as.vector()` function works when applied to matrices and arrays. How does it decide in what order to string the elements of the matrices and arrays together? **(/6)**

`r if (params$hide_answers) "::: {.content-hidden}"`

**Answer**

- ✓ The `as.vector()` function in R is used to coerce an object to a vector. When applied to matrices and arrays, it flattens the object into a one-dimensional vector by concatenating the columns of the matrix or the elements of the array in a column-major order.
- ✓ For matrices, the elements are concatenated column-wise, meaning that the first column is followed by the second column, and so on. For arrays, the elements are concatenated along the last dimension first, then the second-to-last dimension, and so on, until the first dimension.
- ✓ The order in which the elements are strung together is determined by the storage mode of the object. In R, matrices and arrays are stored in column-major order, meaning that the elements are stored column-wise in memory. When `as.vector()` is applied, it follows this order to concatenate the elements into a vector.

```{r}
# Example with a matrix ✓ x 3

# Create a matrix
mat <- matrix(1:6, nrow = 2)

# Convert the matrix to a vector
vec <- as.vector(mat)

# Display the matrix and vector
mat
vec

# Example with an array

# Create an array
arr <- array(1:8, dim = c(2, 2, 2))

# Convert the array to a vector
vec_arr <- as.vector(arr)

# Display the array and vector
arr
vec_arr
```

`r if (params$hide_answers) ":::"`

## Question 10

Use the result produced by `as.vector()` (your own data) and assemble three new arrays with a different combinations of dimensions. Show the dimensions and lengths of the new arrays. **(/14)**

`r if (params$hide_answers) "::: {.content-hidden}"`

**Answer**

```{r}
# ✓ Create a vector
vec <- 1:12

# ✓ Display the vector
vec

# ✓ Convert the vector to an array with different dimensions
new_arr1 <- array(vec, dim = c(2, 3, 2))

# ✓ Display the new array
new_arr1

# ✓ Check the dimensions of the new array
dim(new_arr1)

# Check the class of the new array
class(new_arr1)

# Check the structure of the new array
str(new_arr1)

# ✓ Check the length (number of elements) of the new array
length(new_arr1)

# Check the number of dimensions of the new array
length(dim(new_arr1))

# ✓ A variation of `vec` with different dimensions
new_arr2 <- array(vec, dim = c(3, 2, 2))

# ✓ Display the new array
new_arr2

# ✓ Check the dimensions of the new array
dim(new_arr2)

# ✓ Check the length (number of elements) of the new array
length(new_arr2)

# ✓ ✓ ✓ ✓ A third variation of `vec` with different dimensions
new_arr3 <- array(vec, dim = c(2, 2, 3))
new_arr3
length(new_arr3)
dim(new_arr3)
```

`r if (params$hide_answers) ":::"`

# 4. R Workflows

## Question 11

What is the purpose of commenting code? Name at least three reasons why you should comment your code. **(/3)**

`r if (params$hide_answers) "::: {.content-hidden}"`

**Answer**

- ✓ Commenting code makes your code more readable, understandable, and maintainable. Comments provide context, explanations, and documentation about the code, helping you (and your future self) and others understand the purpose of the code, the logic behind it, and how it works.
- ✓ Comments can also serve as reminders, placeholders, or to-do lists for future work. They help in debugging, troubleshooting, and modifying code by providing insights into the code structure and functionality.
- ✓ Commenting code is a good practice in programming and data analysis because it promotes collaboration, knowledge sharing, and code quality. It is essential for effective communication and ensuring that the codebase remains comprehensible and usable over time.

`r if (params$hide_answers) ":::"`

## Question 12

Why am I pedantic about using commas and periods correctly in my code? Name some use cases of commas and periods. **(/3)**

`r if (params$hide_answers) "::: {.content-hidden}"`

**Answer**

- ✓ The SI system of units uses commas and periods in a specific way: periods are used for decimal points, while commas are used to separate thousands.
- ✓ Using commas and periods correctly in your code is important for readability, clarity, and consistency. Commas are used to separate elements in a vector or list, or arguments in a function call.
- ✓ Incorrect usage of commas and periods can lead to syntax errors, logical errors, or unexpected behaviour in your code. It can make the code difficult to understand, debug, and maintain, especially for others who read or work with the code.

`r if (params$hide_answers) ":::"`

## Question 13

Create a script to read in the file `crops.xlsx` (via a CSV file that you prepare beforehand) and assign its content to the object `crops`. Display the content of the dataframe. **(/3)**

`r if (params$hide_answers) "::: {.content-hidden}"`

**Answer**

```{r, echo=FALSE, output=FALSE}
# Load the tidyverse package
library(tidyverse)

# Read the Excel file into R
crops <- readxl::read_excel("../data/crops.xlsx")
```

- ✓ First convert the Excel file to a CSV file using Excel or an online converter such as ChatGPT.

```{r, echo=TRUE, eval=FALSE}
# Read the CSV file into R 
crops <- read.csv("crops.csv") # ✓ 
head(crops) # ✓
```

`r if (params$hide_answers) ":::"`

## Question 14

Save the newly-created object to a CSV file called `crops2.csv` within your workspace. **(/1)**

`r if (params$hide_answers) "::: {.content-hidden}"`

**Answer**

```{r, echo=TRUE, eval=FALSE}
# Save the object to a CSV file
write.csv(crops, "crops2.csv", row.names = FALSE) # ✓
```

`r if (params$hide_answers) ":::"`

## Question 15

What purpose can the naming of a newly-created dataframe serve? Name at least five reasons. **(/5)**

`r if (params$hide_answers) "::: {.content-hidden}"`

**Answer**

- Naming a newly-created dataframe serves several purposes:
  - ✓ **Clarity**: A descriptive name can help you and others understand the content or purpose of the dataframe.
  - ✓ **Readability**: A well-chosen name makes the code more readable and easier to follow.
  - ✓ **Documentation**: The name can serve as a form of documentation, providing context and information about the dataframe.
  - ✓ **Organisation**: Naming conventions can help organise and manage dataframes in a project or analysis.
  - ✓ **Consistency**: Consistent naming practices across dataframes improve code consistency and maintainability.
  - ✓ **Debugging**: A meaningful name can aid in debugging and troubleshooting code.
  - ✓ **Reusability**: A good name can make the dataframe more reusable in different parts of the code or in other projects.

`r if (params$hide_answers) ":::"`

## Question 16

Using annotated R code, demonstrate your understanding of the various ways to look inside of the `crops` object. Show at least five different ways to inspect the dataframe. **(/5)**

`r if (params$hide_answers) "::: {.content-hidden}"`

**Answer**

```{r}
# ✓ Display the structure of the dataframe
str(crops)

# ✓ Display the first few rows of the dataframe
head(crops)

# ✓ Display the last few rows of the dataframe
tail(crops)

# ✓ Display the summary statistics of the dataframe
summary(crops)

# ✓ Display the dimensions of the dataframe
dim(crops)

# ✓ Display the column names of the dataframe
colnames(crops)

# ✓ Glimpse into the dataframe
glimpse(crops)

# ✓ Look at the names
names(crops)

# ✓ Use the skimr package to get a summary of the dataframe
skimr::skim(crops)

# ✓ Display the data types of the columns
sapply(crops, class)
```

`r if (params$hide_answers) ":::"`

## Question 17

Explain what you see inside the file. What are the columns? What are the rows? What are the data types? **(/5)**

`r if (params$hide_answers) "::: {.content-hidden}"`

**Answer**

- ✓ The `crops` dataframe contains the columns `density`, `block`, `fertiliser`, and `mass`. The rows represent individual observations or measurements of crop mass under different conditions.
- ✓ The `density` column likely represents the density of the crop, `block` represents the experimental block, `fertiliser` represents the type of fertiliser used, and `mass` represents the mass of the crop.
- ✓ The data types of the columns can be inferred from the output of `str(crops)` or `sapply(crops, class)`. For example, `density` and `mass` are numeric or integer, while `block` and `fertiliser` are characters or factors.
- ✓ The density ranges from a minimum of 1 to a maximum of 2. The fertiliser is a factor with levels `A`, `B`, and `C`, the block is a character vector with levels `north`, `south`, `east`, and `west`. The mass ranges from a minimum of 4773 to a maximum of 4873.
- ✓ There are 96 rows in the dataframe, representing 96 observations or measurements.

`r if (params$hide_answers) ":::"`

## Question 18 and 19

See Task B for the remaining questions.
