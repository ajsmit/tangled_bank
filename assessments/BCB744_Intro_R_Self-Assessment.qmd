---
title: "BCB744 Intro R Self-Assessment"
author: "AJ Smit"
---

Here is a self-assessment worksheet for the *Introduction to R* portion of the BCB744 course, based on the provided sources. This worksheet is designed to help you gauge your understanding of the material covered in each lecture and provides resources for further practice.

# General Instructions

* Complete the practice exercises to test your skills.
* Submit your answers to each task's questions no later than 8:30 on the day after the corresponding lectures (e.g. Monday's lecture material is covered by Task A, and must be submitted on Tuesday morning no later than 8:30).
* You do not need to submit anything for the "Practice Exercises" -- those are for your own benefit.
* Immediately after we have gone over the task answers in the class (e.g. on Tuesday morning for Task A), rate your performance according to the [assessment sheet](BCB744_self_assessment_scoring.pdf). Fill your name in on the PDF and submit it on iKamva where it will be kept on record. Each day I'll randomly select five of the submitted tasks to check the honesty of your assessments. 
* Review the relevant course material if you find you are struggling with a section. Ask for help before it is too late! It is best to admit in class if you are falling behind so that others might benefit as well.

# Task A {#sec-task_A}

## 1. R and RStudio

**Understanding Level:** Beginner / Intermediate / Advanced

### Key Concepts

1. Installation of R and RStudio
2. Understanding the RStudio IDE
3. Navigating the RStudio interface
4. Basic R syntax

### Practice Exercises

- Open RStudio. Create a new R script.
- Execute basic arithmetic operations (e.g., `2 + 2, 5 * 3`) in the console.
- Explore the different panes in the RStudio interface (Source, Console, Environment, History, Files, Plots, Packages, Help).

### Questions

1. Why will I get annoyed when you say in your Methods section of your paper that you used RStudio for your analysis?
2. Why is it best practice to include packages you use in your R program explicitly?
3. What are the values after each hashed statement in the following? Use the RStudio **Console** to determine these values:

```{r, eval = FALSE}
mass <- 48 
mass <- mass * 2.0 # mass? 
age <- 42
age <- age - 17 # age?
mass_index <- mass / age # mass_index?
``` 

4. Use R to calculate some simple mathematical expressions. Assign the value of `40` to `x` and assign the value of `23` to `y`. Make `z` the value of `x - y` Display `z` in the console.
5. Explain what this code does (below). What have you learned about writing code, and how would you apply what you have learned in the future? When would one want to use the `round()` function? Name a few example use cases.

```{r, eval = FALSE}
round(sd(apples), 2)
```

## 2. Working with Data and Code

**Understanding Level:** Beginner / Intermediate / Advanced

### Key Concepts

1. Importing data into R.
2. Understanding different types of data files.
2. Understanding data structures (vectors, lists, data frames).
3. Basic coding practices.

### Questions

1. What is the difference between an Excel file and a CSV file?
2. What is the difference between a CSV and TSV file?
3. Why is it important to see the file extension when working with data files?

## 3. Data Classes and Structures in R

**Understanding Level:** Beginner / Intermediate / Advanced

### Key Concepts

1. Understanding data classes in R.
2. Working with vectors, matrices, and data frames.
3. Using indexing and subsetting.

### Practice Exercises

- Create a vector of numbers and a vector of characters and assign them to the variables `numbs` and `letts`, respectively.
- Place these two variables (`numbs` and `letts`) into a data frame called `numbsletts`.
- Create a matrix with the following data:

```{r}
matrix_data <- matrix(1:12, nrow = 3, ncol = 4)
```

- Assign the row names `c("row1", "row2", "row3")` and column names `c("col1", "col2", "col3", "col4")` to the matrix.
- Extract the number in the second row and in the third column.
- Create a new matrix with the same data but with the rows and columns transposed.
- Find five datasets that you like the look and content of. They may be some of the datasets built into R (and the various packages you downloaded), or they may be ones you found somewhere else. For each:
  - describe the data types (statistical view) of the variables contained within,
  - using the functions shown in the Chapter, describe their R data classes of each variable, and
  - using the functions shown in the Chapter, describe their data structures.

### Questions

1. Using examples (new data), explain how the `as.vector()` function works when applied to matrices and arrays. How does it decide in what order to string the elements of the matrices and arrays together?
2. Use the result produced by `as.vector()` (your own data) and assemble a new array with a different combination of dimensions from the one initially produced.

## 4. R Workflows

**Understanding Level:** Beginner / Intermediate / Advanced

### Key Concepts

1. Creating reproducible workflows
2. Using R scripts
3. Commenting code
4. Using packages

### Practice Exercises

- Import the built-in dataset `ChickWeight` using `data(ChickWeight)` and view it.
- Use `head()` and `tail()` to view the first and last rows.
- Use `str()` to see the structure of the data frame.
- Create an R script that imports the `ChickWeight` dataset and assigns it to the object `kfc`.
- Add comments to your script explaining what each line of code does.

Use `?datasets :: ChickWeight` to find help for the dataset ChickWeight.
The course website has links to download additional datasets.

### Questions

1. What is the purpose of commenting code?
2. Why am I pedantic about using commas and periods correctly in my code?
3. Create a script to read in the file `crops.xlsx` and assign its content to the object `crops`.
4. Save the newly-created object to a CSV file called `crops.csv` within your workspace.
5. What purpose can the naming of a newly-created dataframe serve?
6. Using annotated R code, demonstrate your understanding of the various ways to look inside of the `crops` object.
7. Explain what you see inside the file. What are the columns? What are the rows? What are the data types?
8. Explain in words what the pipe operator `%>%` does in R. How does it make your code more readable?
9. Using the various **tidyverse** functions, calculate the mean Â± SD for the crop mass within each combination of `block` and `fertiliser` of the `crops` dataset.

# Task B {#sec-task_B}

## 5. Graphics with **ggplot2**

**Understanding Level:** Beginner / Intermediate / Advanced

### Key Concepts

1. Creating basic plots with **ggplot2**.
2. Understanding the grammar of graphics.
3. Using layers, aesthetics, and geoms.

### Practice Exercises

- Create a scatter plot using **ggplot2** with the `ChickWeight` dataset, plotting `weight` against `Time`.
- Create separate figures for each `Diet` group (i.e. you will have four plots, one for each diet group).
- Add appropriate titles and axes labels to the plots.
- Experiment with different geoms like `geom_line()` or `geom_point()`.

## 6. Faceting Figures

**Understanding Level:** Beginner / Intermediate / Advanced

### Key Concepts

1. Using `facet_wrap()` and `facet_grid()` to create subplots.
2. Displaying data across multiple dimensions.

### Practice Exercises

- Create a scatter plot with **ggplot2** using the `ChickWeight` dataset and use `facet_wrap()` to create subplots for each `Diet`.
- Experiment with different `facet_wrap()` and `facet_grid()` arguments.

### Question

1. Create a scatterplot of `bill_length_mm` against `bill_depth_mm` for `Chinstrap` penguins on `Biscoe` island.
2. Create histograms of `bill_length_mm` for `Adelie` penguins on all three islands (one figure per island). Save each figure as a separate R object which you can later reuse. Again for `Adelie` penguins, create a boxplot for `bill_length_mm` showing all the data on one plot. Save it too as an R object. Combine the four saved figures into one figure using `ggarrange()`.
3. Create a scatter plot of `flipper_length_mm` against `body_mass_g` and use `facet_wrap()` to create separate panels for each island. Take into account which variable best belongs on `x` and `y`. Describe your conclusions.
4. Create a scatter plot of `bill_length_mm` and `body_mass_g` and use `facet_grid()` to create separate panels for each species and island. Describe your findings.
5. Using the figure created in point 4, also show the effect of `sex`. Explain the findings.
6. What are the benefits of using faceting in data visualisation?

## 7. Brewing Colours

**Understanding Level:** Beginner / Intermediate / Advanced

### Key Concepts

1. Customising colours in plots.
2. Using colour palettes effectively.

### Practice Exercises

- Recreate the plots from previous exercises and experiment with different colour scales (e.g., using `scale_color_brewer()`, `scale_fill_viridis_c()`).
- Choose colours that are appropriate and informative for the data you are displaying.

# Task C {#sec-task_C}

## 8. Mapping with **ggplot2**

**Understanding Level:** Beginner / Intermediate / Advanced

### Key Concepts

1. Creating basic maps using **ggplot2**.
2. Using spatial data.

### Practice Exercises

- Staying with the figure you created above, change various aspcects of the theme, line types and thickness, colour fills and other colours, etc. Create some variations for the map and save them as separate figures.
- Think about which aethetic choices make the most pleasing maps.

## 9. Mapping with Style

**Understanding Level:** Beginner / Intermediate / Advanced

### Key Concepts

1. Customising map aesthetics.
2. Adding themes to maps.

### Questions

1. Use the map you created in this lecture and add a title and subtitle. Also adjust it to show appropriately labelled axes.
2. Add a the capital city/town of each province to the map using `geom_point()` and ensure the place name is correctly associated with its point.

## 10. Mapping with Natural Earth and the sf Package

**Understanding Level:** Beginner / Intermediate / Advanced

### Key Concepts

1. Using the sf package for spatial data.
2. Working with Natural Earth data.

### Practice Exercises

- Use the **rnaturalearth** package to download a Natural Earth map of a country of your choice, then plot it using the **sf** package.
- Explore other spatial datasets available with the **rnaturalearth** package.

### Questions

```{r, echo = FALSE, output = FALSE}
# install.packages("rnaturalearth", "rnaturalearthdata", "sf")
library(tidyverse)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)

# for the buffer to work as I expect, swith off
# the functions for spherical geometry:
sf_use_s2(FALSE)

# the full map extent:
xmin <- 12; ymin <- -36.5; xmax <- 40.5; ymax <- -10
xlim <- c(xmin, xmax); ylim <- c(ymin, ymax)

# make a bounding box for cropping:
bbox <- st_bbox(c(xmin = xmin, ymin = ymin,
  xmax = xmax, ymax = ymax))

# might be useful for zooming into a smaller region (False Bay and 
# the Cape Peninsula):
xlim_zoom <- c(17.8, 19); ylim_zoom <- c(-34.5, -33.2)

# load the countries:
safrica_countries <- ne_countries(returnclass = 'sf',
  continent = "Africa",
  country = c("South Africa", "Mozambique",
    "Namibia", "Zimbabwe", "Botswana",
    "Lesotho", "Eswatini"),
  scale = "large")

safrica_countries_new <- safrica_countries |> 
  group_by(continent) |> 
  summarise() |> 
  st_crop(bbox) |>
  st_combine()
```

```{r}
buffer <- safrica_countries_new %>%
  st_buffer(0.4)

ggplot() +
  geom_sf(data = buffer, fill = "lightblue", col = "transparent") +
  geom_sf(data = safrica_countries, colour = "indianred", fill = "beige") +
  theme_minimal()
```

1. Why does the map region extend so far south of the southern tip of Africa when we requested only the countries South Africa, Mozambique, Namibia, Zimbabwe, Botswana, Lesotho, and Eswatini?
2. How do we fix this to plot a more sensible map of the region?
3. What does `st_buffer(0.4)` do?
4. With the above map, zoom into False Bay and the Cape Peninsula. Add the location of the Cape Town city centre to the map using `geom_point()`. Ensure the point is correctly associated with the city name. Ensure the map is correctly labelled and has a title, and is as close to publication quality as you can make it.

# Bonus Task {#sec-bonus}

## 11. The Fiji Earthquake Data

**Understanding Level:** Beginner / Intermediate / Advanced

### Key Concepts

1. Working with real-world datasets.
2. Applying mapping skills to specific data.

### Practice Exercises

- Import the Fiji Earthquake data.
- Use a suitable map to represent the data, with size and colour varying with the magnitude and depth of earthquakes.

### Questions

```{r, echo = FALSE, output = TRUE}
world <- ne_countries(returnclass = 'sf',
  scale = 10, type = "countries") |> 
  select(continent, sovereignt, iso_a3)  

NE_proj <- "+proj=natearth +lon_0=170 "

world_1 <- ne_countries(returnclass = 'sf',
  scale = 10, type = "countries") |> 
  select(continent, sovereignt, iso_a3) |> 
  st_break_antimeridian(lon_0 = 170) |> 
  st_transform(NE_proj)

library(countrycode)

world_1$region <- countrycode(world_1$iso_a3, origin = "iso3c",
  destination = "un.regionsub.name")

sw_pacific <- world_1 |> 
  filter(region %in% c("Australia and New Zealand", "Melanesia", "Micronesia",
    "Indonesia", "Polynesia", "South-eastern Asia")) |> 
  group_by(continent) |>
  summarise()

quakes <- as_tibble(datasets::quakes)
margin <- 15.0
xmin <- min(quakes$long) - margin; xmax <- max(quakes$long) + margin
ymin <- min(quakes$lat) - margin; ymax <- max(quakes$lat) + margin

WGS84_proj <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"

bbox <- st_sfc(st_point(c(xmin, ymin)), st_point(c(xmax, ymax)),
                         crs = WGS84_proj)
bbox_trans <- st_transform(bbox, NE_proj)

sw_pacific_cropped <- sw_pacific |> 
  st_crop(bbox_trans)

quakes_sf <- quakes |> 
  st_as_sf(coords = c("long", "lat"),
    crs = WGS84_proj)
quakes_sf_trans <- st_transform(quakes_sf, NE_proj)

quakes_sf_trans_sub <- quakes_sf_trans |> 
  filter(mag > quantile(mag, 0.75))

ggplot() +
  geom_sf(data = sw_pacific_cropped, colour = "black", fill = "grey70") +
  geom_sf(data = quakes_sf_trans, aes(colour = mag, size = mag),
    stat = "sf_coordinates",
    shape = "*", alpha = 0.4) +
  scale_colour_continuous(type = "viridis") +
  guides(size = "none") +
  coord_sf(expand = FALSE) +
  labs(x = NULL, y = NULL,
    title = "The Fiji Earthquake Data",
    subtitle = "Natural Earth")
```

1. Please recreate the figure, above. You are welcome to reuse the code found on the website. 
2. When plotting the earthquakes, include **only** the earthquake data for earthquakes of magnitude greater than the 75th percentile.
3. Add a point for each of the main island nations in the South Pacific region. Ensure the point is correctly associated with the island name.
4. Ensure the map is correctly labelled and has a title, and is as close to publication quality as you can make it.

Your code needs to show all the steps (thoroughly annotated) leading to the final figure in point 4.

# Task D {#sec-task_D}

## 12, 13 & 14. Tidy Data

**Understanding Level:** Beginner / Intermediate / Advanced

### Key Concepts

1. Principles of tidy data.
2. Using **tidyr** for data reshaping.
3. Using **dplyr** for data wrangling.

### Practice Exercises

- Import a messy dataset and practice reshaping using `tidyr::pivot_longer()` and `tidyr::pivot_wider()`.
- Use **dplyr** to clean and manipulate data in the tidy format.

### Questions

1. What are the key principles of tidy data?
2. What are the differences between wide and long format data?
3. Using the tidy data (`SACTN2_tidy`) and untidy data (`SACTN2`), create line graphs, one for each of DEA, SAWS, and KZNSB, showing a time series of temperature. Ensure you have a column of three figures (`ncol = 1`). Use the fewest number of lines of code possible.

You should end up with two graphs, each with three panels.

## Lecture 15: Recap

**Understanding Level:** Beginner / Intermediate / Advanced

### Key Concepts

1. Review of all key concepts.
2. Practical application of learned skills.

### Practice Exercises

Using a dataset of your choice, perform a full analysis, including data cleaning, manipulation, and visualisation using all the skills learned from previous modules.

## How to Use This Worksheet

- **Be Honest:** Accurately assess your understanding of each topic to identify areas you need to review.
- **Practice Regularly:** Consistent practice is key to mastering R.
- **Seek Help:** Don't hesitate to ask questions on the GitHub Issues page for help.
- **Collaborate:** Work with your peers and discuss the concepts [8, 19].
- **Use the Resources:** Make full use of the provided links and materials for further study.
- **Review:** If you are struggling, review the course material provided by the instructor.
