---
date: "2021-01-01"
title: "Principal Coordinate Analysis (PCoA)"
---

<!--- # Topic 10: Principal Coordinate Analysis (PCoA) --->

::: callout-tip
## **Material required for this chapter**

| Type           | Name                                     | Link                                                                              |
|----------------|------------------------------------------|-----------------------------------------------------------------------------------|
| **Theory**     | Numerical Ecology in R                   | See pages 140-145                                                                 |
| **Slides**     | CA lecture slides                        | [ðŸ’¾ `BCB743_10_PCoA.pdf`](../slides/BCB743_10_PCoA.pdf)                           |
| **Data**       | The Doubs River data                     | [ðŸ’¾ `Doubs.RData`](../data/NEwR-2ed_code_data/NeWR2-Data/Doubs.RData)             |
|                | The seaweed environmental data           | [ðŸ’¾ `SeaweedEnv.RData`](../data/seaweed/SeaweedEnv.RData)                         |
|                | The seaweed bioregion classification     | [ðŸ’¾ `bioregions.csv`](../data/seaweed/bioregions.csv).                            |
:::

Principal Coordinates Analysis (PCoA) is also known as Classical Multidimensional Scaling (MDS). It is an ordination technique used to analyse and represent multivariate data based on a (dis)similarity matrix. We use PCoA when it is necessary to specify dissimilarity measures other than Euclidean distance or $\chi^2$ distance, as in PCA and CA, respectively.

Unlike PCA and CA, which operate directly on the raw data matrix, PCoA takes a (dis)similarity matrix as input. This matrix can be calculated using various dissimilarity measures available in **vegan**'s `vegdist()` function, which may be necessary when our dataset includes quantitative, semi-quantitative, qualitative, and mixed variables. If the dissimilarities are Euclidean distances, PCoA results are equivalent to those obtained from PCA.

PCoA performs a dimensionality reduction on the (dis)similarity matrix, scaling the dissimilarities and returning a set of points in a lower-dimensional space (typically 2D or 3D). When plotted, the Euclidean distances between these points approximate the original dissimilarities, effectively representing the dissimilarities between objects as Euclidean distances in a lower-dimensional space. This representation can be helpful in visualising and interpreting complex relationships in a more interpretable form.

Conceptually, PCoA is similar to PCA and CA in that it aims to represent the relationships between objects in a lower-dimensional space. However, it differs in its approach to preserving distances. While PCA preserves Euclidean distances between objects and CA preserves $\chi^2$ distances, PCoA can preserve any (dis)similarity measure provided as input and so it is more flexible for handling a greater range of data types.

In PCoA, the eigenvalues represent the extent to which each principal coordinate axis captures the variability in the original dissimilarity matrix. The proportion of a given eigenvalue to the sum of all eigenvalues indicates the relative importance of each axis. Higher eigenvalues represent axes that capture more variance (or dissimilarity) in the data, helping identify the most significant gradients in the dataset.

While earlier versions of PCoA in **vegan** did not provide information about the original variables, this limitation has been overcome in newer versions of the `capscale()` function.

## Set-up the Analysis Environment

```{r}
library(tidyverse)
library(vegan)

# Files will be referenced using here::here() for absolute paths
```

## The Doubs River Data

We continue to use the species data:

```{r}
load(here::here("data", "NEwR-2ed_code_data", "NEwR2-Data", "Doubs.RData"))
# remove the 8th row because it sums to zero
spe <- dplyr::slice(spe, -8)
```

## Calculate a Suitable Dissimilarity Matrix

You may or may not want to calculate a dissimilarity index upfront (see below). Here I calculate the Bray-Curtis dissimilarity which is appropriate for abundance data:

```{r}
spe_bray <- vegdist(spe)
```

## Do the PCoA

<!-- The **vegan** function `cmdscale()` can be used for PCoA: -->

The book *Numerical Ecology in R* uses a built-in function `cmdscale()` or the function `pcoa()` in **ape** for its PCoA calculation. The **vegan** function `capscale()` can also be used for PCoA, and this is the approach I take here. The 'CAP' in `capscale()` stands for 'Canonical Analysis of Principal Coordinates'. `capscale()` works differently from `rda()` or `cca()` in that we can only specify the input via a formula interface. See `?capscale` for information. To run a PCoA without constraints we use `1` on the right-hand side of the formula (this suggests that PCoA also offer options for constrained ordination), with the dissimilarity matrix on the left. Here is how, and I give three options for doing the analysis:

### Option 1: Supply a precalculated dissimilarity matrix
```{r}
# spe_pcoa <- cmdscale(spe_bray, k = nrow(spe) - 1, eig = TRUE)
spe_pcoa <- capscale(spe_bray ~ 1)
spe_pcoa
```

When we do a `summary()` of the output we see that the results are similar to that of PCA and CA, but the **Species scores** are missing because information about original variables (species) are not available. This is due to the fact that in this instance input into `capscale()` was the square (site Ã— site) dissimilarity matrix produced from the species table, not the raw species table itself. Here is the output:

```{r}
summary(spe_pcoa)
```

### Option 2: Supply the raw data to `capscale()`
We can provide the raw species table instead and request that `capscale()` calculates the required dissimilarity indices by automagically calling `vegdist()`. The advantage of this approach is that it adds species scores as weighted sums of (residual) community matrix, whereas only providing the pre-calculated dissimilarity matrix provides no fixed method for adding species scores. **I advocate providing a raw species table to `capscale()` to retain the species information**. This avoids many problems later on, such as having to calculate the weighted species scores ourselves.

```{r}
spe_pcoa <- capscale(spe ~ 1, distance = "bray")
spe_pcoa
```

`summary()` now produces a familiar and more complete output:

```{r}
summary(spe_pcoa)
```

### Option 3: Use pre-made dissimilarity matrix and add species back using `sppscores()`
Another approach to add back the species information into the ordination object produced by supplying the pre-made dissimilarity matrix to `capscale()`:

```{r}
spe_pcoa <- capscale(spe_bray ~ 1)
sppscores(spe_pcoa) <- spe

summary(spe_pcoa)
```

<!-- The Option 3 approach might be useful if we want to calculate some dissimilarity matrix using a function that does not reside within the **vegan** universe (see, for example, [Handling mixed variable types](http://localhost:4321/quantecol/chapters/10-pcoa/#handling-mixed-variable-types)). -->

We can unpack what is inside the results, and there we can see that we can access the eigenvalues as we did for PCA and CA:

```{r eval=FALSE}
str(spe_pcoa) # not shown due to length of output
```

The percentage inertia explained by the first three axes is therefore:

```{r}
round(sum(spe_pcoa$CA$eig[1:3]) / sum(spe_pcoa$CA$eig) * 100, 2)
```

```{r fig.height=4, fig.width=6}
#| fig.align: center
#| fig.cap: "Scree plot of the Doubs River environmental data PCA."
#| label: fig-pcoa-screeplot

# The `bstick()` function is not compatible with PCoA
# when negative eigenvalues are present
# Plot the scree plot without the broken stick model

# Extract eigenvalues
eigenvalues <- spe_pcoa$CA$eig

# Calculate the proportion of variance explained
variance_explained <- eigenvalues / sum(eigenvalues)

# Create a scree plot
plot(variance_explained, type = "b", main = "Scree Plot",
     xlab = "Principal Components", ylab = "Prop. Var. Explained")
```

The scree plot (@fig-pcoa-screeplot) shows the proportion of variation explained by the PC axes. In this case, we will still only retain the first two axes. I selected these because after the 2nd PC, the proportion of variance explained by each additional PC is less than 10% and the plot starts levelling off.

See *Numerical Ecology in R* (pp. 140 to 145) for information about the interpretation of a PCoA and the ordination diagrams shown below.

## Ordination Diagrams

We create the ordination diagrammes as before:

```{r}
#| fig-width: 10
#| fig-height: 5.625 
#| fig.align: center
#| fig.cap: "PCoA ordination plot of the Doubs River species data showing site scaling (left) and species scaling (right)."
#| label: fig-pcoa-biplots

opar <- par(no.readonly = TRUE)
par(mfrow = c(1, 2))
plot(spe_pcoa, scaling = 1, main = "PCoA fish abundances - biplot scaling 1")
plot(spe_pcoa, scaling = 2, main = "PCoA fish abundances - biplot scaling 2")
par(opar)
```

Scaling 1 and scaling 2 is the same as in PCA and CA.

The plots above work okay, but we can improve them. Note that you can also apply these improvements to PCA and CA ordinations. Let us build plots from scratch:

```{r}
#| fig-width: 10
#| fig-height: 5.625 
#| fig.align: center
#| fig.cap: "PCoA ordination plot made with `ordiplot()` of the Doubs River species data showing site scaling (left) and species scaling (right)."
#| label: fig-pcoa-ordiplots

opar <- par(no.readonly = TRUE)
par(mfrow = c(1, 2))
pl1 <- ordiplot(spe_pcoa, type = "none", scaling = 1,
                main = "PCoA fish abundances - biplot scaling 1")
points(pl1, "sites", pch = 21, cex = 1.75, col = "grey80", bg = "grey80")
points(pl1, "species", pch = 21, col = "turquoise", arrows = TRUE)
text(pl1, "species", col = "blue4", cex = 0.9)
text(pl1, "sites", col = "red4", cex = 0.9)

pl2 <- ordiplot(spe_pcoa, type = "none", scaling = 2,
                main = "PCoA fish abundances - biplot scaling 2")
points(pl2, "sites", pch = 21, cex = 1.75, col = "grey80", bg = "grey80")
points(pl2, "species", pch = 21, col = "turquoise", arrows = TRUE)
text(pl2, "species", col = "blue4", cex = 0.9)
text(pl2, "sites", col = "red4", cex = 0.9)
par(opar)
```

We can also fit response surfaces using `ordisurf()`:

```{r}
#| fig-width: 10
#| fig-height: 10
#| fig.align: center
#| fig.cap: "PCoA ordination plots with species response surfaces of the Doubs River species data emphasising four species of fish: A) Satr, B) Scer, C) Teso, and D) Cogo. D) additionally has the environmental vectors projected on the plot, with the significant vectors shown in red."
#| label: fig-pcoa-ordisurf

require('viridis')
palette(viridis(8))

opar <- par(no.readonly = TRUE)
par(mar = c(4, 4, 0.9, 0.5) + .1, mfrow = c(2, 2))
with(spe, tmp <- ordisurf(spe_pcoa ~ Satr, bubble = 3,
                          family = quasipoisson, knots = 2, col = 6,
                          display = "sites", main = "Salmo trutta fario"))
abline(h = 0, v = 0, lty = 3)
with(spe, tmp <- ordisurf(spe_pcoa ~ Scer, bubble = 3,
                          family = quasipoisson, knots = 2, col = 6,
                          display = "sites", main = "Scardinius erythrophthalmus"))
abline(h = 0, v = 0, lty = 3)
with(spe, tmp <- ordisurf(spe_pcoa ~ Teso, bubble = 3,
                          family = quasipoisson, knots = 2, col = 6,
                          display = "sites", main = "Telestes souffia"))
abline(h = 0, v = 0, lty = 3)
with(spe, tmp <- ordisurf(spe_pcoa ~ Cogo, bubble = 3,
                          family = quasipoisson, knots = 2, col = 6,
                          display = "sites", main = "Cottus gobio"))
abline(h = 0, v = 0, lty = 3)

env <- dplyr::slice(env, -8)

(spe_pcoa_env <- envfit(spe_pcoa, env, scaling = 2)) 
plot(spe_pcoa_env, col = "grey40")
plot(spe_pcoa_env, p.max = 0.05, col = "red")
par(opar)
```

## Handling Mixed Variable Types

The simplest way to handle mixed variable types is to use simply plot the factor variable of interest as a differently shaped or coloured symbol on the ordination diagram. I will demonstrate this with the seaweed dataset.

First, I construct an environmental dataset that contains some mixed variables by column binding a dataset of seawater temperatures and a bioregional classification of the 58 coastal sections:

```{r}
bioreg <- read.csv(here::here("data", "seaweed", "bioregions.csv"), header = TRUE)
load(here::here("data", "seaweed", "SeaweedEnv.RData"))
E <- cbind(bioreg, env) %>% 
  mutate(spal.prov = factor(spal.prov),
         spal.ecoreg = factor(spal.ecoreg),
         lombard = factor(lombard),
         bolton = factor(bolton))
head(E)
str(E)
```

In Smit et al. (2017) I used forward selection and the assessment of VIF to find only the non-collinear variables, which included `augMean`, `febRange`, `febSD` and `augSD` as the most parsimonious descriptors. I'll do a PCoA of the seaweed environmental data (only the subset indicated above) and colour the sites by the bioregion:

```{r}
#| fig-width: 5.625
#| fig-height: 5.625 
#| fig.align: center
#| fig.cap: "PCoA ordination plot of the seaweed environmental data with sites coloured by bioregion."
#| label: fig-pcoa-seaweed-env

E_pcoa <- capscale(env[, c("augMean", "febRange", "febSD", "augSD")] ~ 1)

col <- c("firebrick1", "seagreen4", "blue2", "goldenrod2")
pch <- c(17, 19)

opar <- par(no.readonly = TRUE)
ordiplot(E_pcoa, type = "n", scaling = 1,
         xlim = c(-1.8, 2), ylim = c(-2.8, 1.2),
         main = "PCoA of seaweed env. data")
points(E_pcoa, "sites", pch = 21, cex = 1.75, col = col[E$bolton], bg = "white")
text(E_pcoa, "sites", col = col[E$bolton], cex = 0.5)
```

The arrangement of sites in the ordination diagram (@fig-pcoa-seaweed-env) is still only affected by `augMean`, `febRange`, `febSD`, and `augSD` and colour is used only to identify the sites by bioregion. Colour does not affect the outcome of the ordination, and yet we can already see that sites show a clear bioregional grouping. Please see the analysis of the [Mayombo diatom dataset](nMDS_diatoms.qmd) for additional approaches to deal with categorical variables that are presumed to be  influential. To formally account for bioregion in the ordination, we must take a different approach.

The second option is to use a suitable dissimilarity metric. Numerical, nominal, ordinal, and binary variables can all be accommodated with the Gower distance. We do not use **vegan** for this, but rather the `daisy()` function in **cluster**.

We calculate the Gower distances and proceed with the PCoA as before:

```{r}
library(cluster)

# cannot use mixed var  types
# E_gower <- vegdist(E, method = "gower") 

# can handle mixed var types... use instead of vegdist() gower dissimilarity
E_gower <- daisy(E, metric = "gower") 

summary(E_gower)

E_mat <- as.matrix(E_gower)
E_mat[1:5, 1:5]

E_pcoa <- capscale(E_mat ~ 1)

# sadly this means that the names in the Spcies scores are now missing
summary(E_pcoa)
```

We can extract the various kinds of scores for manual plotting.

## References

::: {#refs}
:::
