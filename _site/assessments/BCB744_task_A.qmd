---
title: "BCB744 Task A"
format: html
params: 
  hide_answers: false
---

# 1. R and RStudio

## Question 1

Why will I get annoyed when you say in your Methods section of your paper that you used RStudio for your analysis?

`r if (params$hide_answers) "::: {.content-hidden}"`

**Answer**

- ✓ I will get annoyed because RStudio is not a statistical computing software -- it is an integrated development environment (IDE) for R. Stating in a Methods section that an analysis was conducted in “RStudio” conflates the software used for computation (R) with the interface used to interact with it (RStudio).

- Further, reporting the actual software and package versions used is important for reproducibility. Stating “RStudio” obscures the fact that R (the statistical language) is what executes the computations, and RStudio is just a tool that provides a user-friendly interface with features such as script editing, debugging, and visualisation conveniences.

- A proper citation in the Methods section should explicitly reference R (with its version number) and any relevant packages that were integral to the analysis. For example:

> “All analyses were conducted in R (v4.3.1; R Core Team, 2023) using the packages **brms**, **ggplot2**, and **tidyverse**.”

- You can find the version number of R with the command `citation()`. Similarly, the citation for, say, **ggplot2** can be found with `citation("ggplot2)`.

- Mentioning RStudio may be acceptable in passing if there is a specific reason, such as explaining how code was executed (e.g., using RMarkdown or Quarto within RStudio). However, in general, RStudio itself does not perform any computations, making its inclusion misleading and, to someone who cares about precision in computational reporting, annoying.

`r if (params$hide_answers) ":::"`

## Question 2

Why is it best practice to include packages you use in your R program explicitly?

`r if (params$hide_answers) "::: {.content-hidden}"`

**Answer**

Explicitly specifying R packages in your scripts ensures reproducibility, transparency, debugging efficiency, and dependency management. Consequently, you make your code robust (less prone to failure), interpretable (easy for others to read and understand), and easily executable across different environments (different people's computers, or different kinds of operating systems).

`r if (params$hide_answers) ":::"`

## Question 3

What are the values after each hashed statement in the following? Use the RStudio **Console** to determine these values:

```{r, eval = FALSE}
mass <- 48 
mass <- mass * 2.0 # mass? 
age <- 42
age <- age - 17 # age?
mass_index <- mass / age # mass_index?
``` 

`r if (params$hide_answers) "::: {.content-hidden}"`

**Answer**

```{r, eval = TRUE}
mass <- 48 
mass <- mass * 2.0 # mass? 
mass 
age <- 42
age <- age - 17 # age?
age
mass_index <- mass / age # mass_index?
mass_index
``` 

`r if (params$hide_answers) ":::"`

## Question 4

Use R to calculate some simple mathematical expressions. Assign the value of `40` to `x` and assign the value of `23` to `y`. Make `z` the value of `x - y` Display `z` in the console.

`r if (params$hide_answers) "::: {.content-hidden}"`

**Answer**

```{r, eval = TRUE}
x <- 40
y <- 23
z <- x - y
z
```

`r if (params$hide_answers) ":::"`

## Question 5

Explain what this code does (below). What have you learned about writing code, and how would you apply what you have learned in the future? When would one want to use the `round()` function? Name a few example use cases.

```{r, eval = FALSE}
round(sd(apples), 2)
```

`r if (params$hide_answers) "::: {.content-hidden}"`

**Answer**

- ✓ The `round()` function in R is used to round a numeric value to a specified number of decimal places. In this code snippet, the `round()` function is applied to the standard deviation of a numeric vector called `apples`. The second argument to `round()` is `2`, which specifies that the standard deviation should be rounded to two decimal places.
- ✓ This function highlights the importance of precision in numerical computations. Functions like `round()` are useful for data presentation, statistical reporting, and computational accuracy because they allow one to control the level of numerical detail in outputs, which is important in exploratory analysis and final reporting.
- ✓ Using functions with clear, well-defined arguments (like specifying digits) improves code readability and reproducibility.
- ✓ We also learned that we can nest function within one-another. Here, `sd()` is nested within `round()` to round the standard deviation to two decimal places.

`r if (params$hide_answers) ":::"`
