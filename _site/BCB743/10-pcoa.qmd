---
date: "2021-01-01"
title: "10. Principal Coordinate Analysis (PCoA)"
subtitle: ""
---

<!--- # Topic 10: Principal Coordinate Analysis (PCoA) --->

::: callout-tip
## **Material required for this chapter**

| Type           | Name                                     | Link                                                                              |
|----------------|------------------------------------------|-----------------------------------------------------------------------------------|
| **Slides**     | CA lecture slides                        | [ðŸ’¾ `BCB743_10_PCoA.pdf`](../slides/BCB743_10_PCoA.pdf)                           |
| **Data**       | The Doubs River data                     | [ðŸ’¾ `Doubs.RData`](../data/NEwR-2ed_code_data/NeWR2-Data/Doubs.RData)             |
|                | The seaweed environmental data           | [ðŸ’¾ `SeaweedEnv.RData`](../data/seaweed/SeaweedEnv.RData)                         |
|                | The seaweed bioregion classification     | [ðŸ’¾ `bioregions.csv`](../data/seaweed/bioregions.csv).                            |
:::

Rather than using raw data as in a CA, PCoA takes a (dis)similarity matrix as input; in other words, any of the dissimilarities calculated by **vegan**'s `vegdist()` function can be used, which is great as they are well-suited to species data. If dissimilarities are Euclidean distances, then PCoA is equal to PCA. Another thing that makes a PCoA more useful is that (dis)similarity matrices calculated from quantitative, semi-quantitative, qualitative, and mixed variables can be handled.

PCoA scaling takes a set of dissimilarities and returns a set of points such that when plotted in 2D or 3D space the distances between the points are approximately equal to the dissimilarities. In other words, it tries to represent species dissimilarities as Euclidean distances.

## Set-up the analysis environment

```{r}
library(tidyverse)
library(vegan)

# setting up a 'root' file path so I don't have to keep doing it later...
root <- "../data/"
```

## The Doubs River data

We continue to use the species data:

```{r}
load(paste0(root, "NEwR-2ed_code_data/NEwR2-Data/Doubs.RData"))
# remove the 8th row because it sums to zero
spe <- dplyr::slice(spe, -8)
```

## Calculate a suitable dissimilarity matrix

You may or may not want to calculate a dissimilarity index upfront (see below). Here I calculate the Bray-Curtis dissimilarity which is appropriate for abundance data:

```{r}
spe_bray <- vegdist(spe)
```

## Do the PCoA

<!-- The **vegan** function `cmdscale()` can be used for PCoA: -->

The book *Numerical Ecology in R* uses a built-in function `cmdscale()` or the function `pcoa()` in **ape** for its PCoA calculation. The **vegan** function `capscale()` can also be used for PCoA, and this is the approach I take here. The 'CAP' in `capscale()` stands for 'Canonical Analysis of Principal Coordinates'. `capscale()` works differently from `rda()` or `cca()` in that we can only specify the input via a formula interface. See `?capscale` for information. To run a PCoA without constraints we use `1` on the righthand side of the formula, with the dissimilarity matrix on the left. Here is how, and i give three options for doing the analysis:

### Option 1---supply a precalculated dissimilarity matrix
```{r}
# spe_pcoa <- cmdscale(spe_bray, k = nrow(spe) - 1, eig = TRUE)
spe_pcoa <- capscale(spe_bray ~ 1)
spe_pcoa
```

When we do a `summary()` of the output we see that the results are similar to that of PCA and CA, but the **Species scores** are missing because information about original variables (species) are not available. This is due to the fact that in this instance input into `capscale()` was the square (site Ã— site) dissimilarity matrix produced from the species table, not the raw species table itself. Here is the output:

```{r}
summary(spe_pcoa)
```

### Option 2---supply the raw data to `capscale()`
We can provide the raw species table instead and request that `capscale()` calculates the required dissimilarity indices by automagically calling `vegdist()`. The advantage of this approach is that it adds species scores as weighted sums of (residual) community matrix, whereas only providing the pre-calculated dissimilarity matrix provides no fixed method for adding species scores. **I advocate providing a raw species table to `capscale()` to retain the species information**. This avoids many problems later on, such as having to calculate the weighted species scores ourselves.

```{r}
spe_pcoa <- capscale(spe ~ 1, distance = "bray")
spe_pcoa
```

`summary()` now produces a familiar and more complete output:

```{r}
summary(spe_pcoa)
```

### Option 3---use pre-made dissimilarity matrix and add species back using `sppscores()`
Another approach to add back the species information into the ordination object produced by supplying the pre-made dissimialrity matrix to `capscale()`:

```{r}
spe_pcoa <- capscale(spe_bray ~ 1)
sppscores(spe_pcoa) <- spe

summary(spe_pcoa)
```

<!-- The Option 3 approach might be useful if we want to calculate some dissimilarity matrix using a function that does not reside within the **vegan** universe (see, for example, [Handling mixed variable types](http://localhost:4321/quantecol/chapters/10-pcoa/#handling-mixed-variable-types)). -->

We can unpack what is inside the results, and there we can see that we can access the eigenvalues as we did for PCA and CA:

```{r eval=FALSE}
str(spe_pcoa) # not shown due to length of output
```

The percentage inertia explained by the first three axes is therefore:

```{r}
round(sum(spe_pcoa$CA$eig[1:3]) / sum(spe_pcoa$CA$eig) * 100, 2)
```

See *Numerical Ecology in R* (pp. 140 to 145) for information about the interpretation of a PCoA and the ordination diagrams shown below.

## Ordination diagrams

We create the ordination diagrammes as before:

```{r}
#| fig-width: 8
#| fig-height: 6 
plot(spe_pcoa, scaling = 1, main = "PCoA fish abundances - biplot scaling 1")
plot(spe_pcoa, scaling = 2, main = "PCoA fish abundances - biplot scaling 2")
```

Scaling 1 and scaling 2 is the same as in CA.

The plots above work okay, but we can improve them. Note that you can also apply these improvements to PCA and CA ordinations. Let us build plots from scratch:

```{r}
#| fig-width: 8
#| fig-height: 6 
pl1 <- ordiplot(spe_pcoa, type = "none", scaling = 1,
                main = "PCoA fish abundances - biplot scaling 1")
points(pl1, "sites", pch = 21, cex = 1.75, col = "grey80", bg = "grey80")
points(pl1, "species", pch = 21, col = "turquoise", arrows = TRUE)
text(pl1, "species", col = "blue4", cex = 0.9)
text(pl1, "sites", col = "red4", cex = 0.9)

pl2 <- ordiplot(spe_pcoa, type = "none", scaling = 2,
                main = "PCoA fish abundances - biplot scaling 2")
points(pl2, "sites", pch = 21, cex = 1.75, col = "grey80", bg = "grey80")
points(pl2, "species", pch = 21, col = "turquoise", arrows = TRUE)
text(pl2, "species", col = "blue4", cex = 0.9)
text(pl2, "sites", col = "red4", cex = 0.9)
```

We can also fit response surfaces using `ordisurf()`:

```{r}
#| fig-width: 8
#| fig-height: 6 
dev.off()
require('viridis')
palette(viridis(8))
par(mar = c(4, 4, 0.9, 0.5) + .1, mfrow = c(2, 2))
with(spe, tmp <- ordisurf(spe_pcoa ~ Satr, bubble = 3,
                          family = quasipoisson, knots = 2, col = 6,
                          display = "sites", main = "Satr"))
abline(h = 0, v = 0, lty = 3)
with(spe, tmp <- ordisurf(spe_pcoa ~ Scer, bubble = 3,
                          family = quasipoisson, knots = 2, col = 6,
                          display = "sites", main = "Scer"))
abline(h = 0, v = 0, lty = 3)
with(spe, tmp <- ordisurf(spe_pcoa ~ Teso, bubble = 3,
                          family = quasipoisson, knots = 2, col = 6,
                          display = "sites", main = "Teso"))
abline(h = 0, v = 0, lty = 3)
with(spe, tmp <- ordisurf(spe_pcoa ~ Cogo, bubble = 3,
                          family = quasipoisson, knots = 2, col = 6,
                          display = "sites", main = "Cogo"))
abline(h = 0, v = 0, lty = 3)

env <- dplyr::slice(env, -8)

(spe_pcoa_env <- envfit(spe_pcoa, env, scaling = 2)) 
plot(spe_pcoa_env, col = "grey40")
plot(spe_pcoa_env, p.max = 0.05, col = "red")
```

## Handling mixed variable types

To handle mixed variable types (numerical, nominal, ordinal, binary) we can use the Gower distance. We do not use **vegan** for this, but rather the `daisy()` function in **cluster**.

I construct a environmental dataset that contains some mixed variables by column binding a dataset of seawater temperatures and a bioregional classificationn of the 58 coastal sections (the seaweed datasets):

```{r}
bioreg <- read.csv(paste0(root, "seaweed/bioregions.csv"), header = TRUE)
load(paste0(root, "seaweed/SeaweedEnv.RData"))
E <- cbind(bioreg, env) %>% 
  mutate(spal.prov = factor(spal.prov),
         spal.ecoreg = factor(spal.ecoreg),
         lombard = factor(lombard),
         bolton = factor(bolton))
head(E)
str(E)
```

Now we calculate the Gower distances and proceed with the PCoA as before:

```{r}
library(cluster)

# cannot use mixed var  types
# E_gower <- vegdist(E, method = "gower") 

# can handle mixed var types... use instead of vegdist() gower dissimilarity
E_gower <- daisy(E, metric = "gower") 

summary(E_gower)

E_mat <- as.matrix(E_gower)
E_mat[1:5, 1:5]

E_pcoa <- capscale(E_mat ~ 1)

# sadly this means that the names in the Spcies scores are now missing
summary(E_pcoa)
```

We can extract the various kinds of scores for manual plotting.

:::{.callout-important}
## Integrative Assignment

An integrative assignment needs to be submitted a week after the conclusion of this module. Please refer to the [Integrative Assignment](/slides/BCB743/10-int_assign.html) exercises and start working towards completing the various analyses.
:::

## References

::: {#refs}
:::
