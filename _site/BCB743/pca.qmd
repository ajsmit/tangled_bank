---
date: "2021-01-01"
title: "Principal Component Analysis (PCA)"
subtitle: "Introducing the most basic of ordnination techniques"
---

::: callout-tip
## **Material required for this chapter**

| Type           | Name                                     | Link                                                                              |
|----------------|------------------------------------------|-----------------------------------------------------------------------------------|
| **Theory**     | Numerical Ecology in R                   | See pages 117-132                                                                 |
| **Slides**     | PCA lecture slides                       | [ðŸ’¾ `BCB743_08_PCA.pdf`](../slides/BCB743_08_PCA.pdf)                             |
| **Data**       | The Doubs River data                     | [ðŸ’¾ `Doubs.RData`](../data/NEwR-2ed_code_data/NeWR2-Data/Doubs.RData)             |
| **R function** | A function for ordination plots          | [ðŸ’¾ `cleanplot.pca.R`](../data/NEwR-2ed_code_data/NeWR2-Functions/cleanplot.pca.R)| 
:::

::: {.callout-important appearance="simple"}
## Tasks to complete in this Chapter

* [Task C 1--5](assessments/Task_C.qmd)
:::

## Introduction to Principal Component Analysis (PCA)

::: {.callout-important appearance="simple"}
## PCA as a foundation for undertanding ordination

Thoroughly understanding PCA is a prerequisite for understanding more complex ordination techniques. Mastered this chapter before moving on to CA, PCoA, RDA, and CCA. Much of the same terminology and concepts are used in these techniques.
:::

Ordination refers to a suite of multivariate techniques that reduce a high-dimensional dataset into a lower-dimensional space, typically 2D or 3D, in such a way that any intrinsic structure in the data forms visually-discernible patterns (Pielou, 1984). In ecology, ordination techniques are used to describe relationships between community structure patterns and underlying environmental gradients. They allow us to determine the relative importance of different gradients and visualise species-environment relationships.

Principal Component Analysis (PCA) is one of the commonly used ordination techniques in ecology. It is a dimensionality reduction technique that transforms the original set of variables into a new set of uncorrelated variables called principal components. PCA is performed on a data matrix containing species abundances or environmental variables across multiple sites or samples.

The PCA process involves calculating the eigenvectors and eigenvalues of the covariance or correlation matrix of the data. The eigenvectors represent the directions of maximum variance in the data, and the corresponding eigenvalues represent the amount of variance explained by each eigenvector. The new axes, called principal components, are linear combinations of the original variables, ordered by the amount of variance they explain.

PCA preserves the Euclidean distances between samples in the original high-dimensional space when projecting them onto the lower-dimensional ordination space. This property makes PCA more suitable for analysing environmental data, where Euclidean distances between samples are meaningful and interpretable. However, for species data, which is often in the form of counts or frequencies, Euclidean distances may not be an appropriate measure of dissimilarity between samples.

In species data, the abundance of one species is not independent of the abundances of other species, as they are constrained by the total number of individuals in a sample. This violates the assumptions of Euclidean distances, which treat variables as independent and equally weighted. As a result, PCA may not accurately represent the underlying ecological gradients in species data, as it can be unduly influenced by highly abundant or rare species.

For analysing species data, ordination techniques that preserve other measures of dissimilarity, such as the $\chi^2$-squared distance (used in Correspondence Analysis) or user-defined distances (used in Principal Coordinate Analysis), may be more appropriate. These techniques account for the unique characteristics of species data and can provide more ecologically meaningful representations of community patterns.

## Set-up the Analysis Environment

```{r}
library(tidyverse)
library(vegan)
library(ggcorrplot) # for the correlations
library(ggpubr)
```

## The Doubs River Data

```{r}
load("../data/NEwR-2ed_code_data/NEwR2-Data/Doubs.RData")
head(env)
```

## First Do a Correlation

```{r}
#| fig-width: 8
#| fig-height: 8
#| fig.align: center
#| fig.cap: "Pairwise correlations among the environmental variables included with the Doubs River study."
#| label: fig-pca-correlation

# computing a correlation matrix
corr <- round(cor(env), 1)

# visualisation of the correlation matrix
ggcorrplot(corr, type = 'upper', outline.col = "white",
           colors = c("#1679a1", "white", "#f8766d"),
           lab = TRUE)
```

Some variables are very correlated, and they might be omitted from the subsequent analyses. We say that these variables are 'collinear.' Collinear variables cannot be teased apart in terms of finding out which one is most influential in structuring the community. There are more advanced ways to search for collinear variables (e.g. Variance Inflation Factors, VIF) and in this way we can systematically exclude them from the PCA. See @graham2003confronting for a discussion on collinearity. Here we will proceed with all the variables.

## See the Spatial Context

The patterns in the data and the correlations between them will make more sense if we can visualise a spatial context. Thankfully spatial data are available:

```{r}
#| fig.align: center
#| fig.cap: "The spatial configuration of the Doubs River sites."
#| label: fig-pca-map1

head(spa)
ggplot(spa, aes(x = X, y = Y, label = rownames(spa))) +
  geom_point(shape = 1) +
  geom_label(vjust = 0, nudge_y = 0.5, check_overlap = TRUE)
```

These site numbers correspond approximately to the ones in @verneaux1973cours but some of the numbers may have been shifted slightly in the example Doubs dataset used here compared to how they were originally numbered in Verneaux's thesis and subsequent publication. This should not affect the interpretation. We can also scale the symbol size by the magnitude of the environmental variables. Lets look at two pairs of variables that are strongly correlated with one-another:

```{r}
#| fig-width: 8
#| fig-height: 6
#| fig.align: center
#| fig.cap: "Four different representations of the site configuration (spatial context) of the Doubs River sampling layout. Symbols are scaled relative to A) ammonium concentration, B) BOD, C) Altitude, and D) Flow rate."
#| label: fig-pca-map2

# We scale the data first so as to better represent the full
# magnitude of all variables with a common symbol size
env_std <- decostand(env, method = "standardize")

# positive correlations
plt1 <- ggplot(spa, aes(x = X, y = Y, label = rownames(spa))) +
  geom_point(shape = 1, col = "red", aes(size = env_std$amm, shape = 3)) +
  geom_text(vjust = -0.5, nudge_y = 0.5, check_overlap = TRUE) +
  labs(size = "Magnitude", title = "Ammonium concentration")

plt2 <- ggplot(spa, aes(x = X, y = Y, label = rownames(spa))) +
  geom_point(shape = 1, col = "red", aes(size = env_std$bod)) +
  geom_text(vjust = -0.5, nudge_y = 0.5, check_overlap = TRUE) +
  labs(title = "Biological oxygen demand")

# inverse correlations
plt3 <- ggplot(spa, aes(x = X, y = Y, label = rownames(spa))) +
  geom_point(shape = 1, col = "blue", aes(size = env_std$alt)) +
  geom_text(vjust = -0.5, nudge_y = 0.5, check_overlap = TRUE) +
  labs(title = "Altitude")

plt4 <- ggplot(spa, aes(x = X, y = Y, label = rownames(spa))) +
  geom_point(shape = 1, col = "blue", aes(size = env_std$flo)) +
  geom_text(vjust = -0.5, nudge_y = 0.5, check_overlap = TRUE) +
  labs(title = "Flow rate")

ggarrange(plt1, plt2, plt3, plt4, nrow = 2, ncol = 2,
          common.legend = TRUE, labels = "AUTO")
```

## Do the PCA

We use the function `rda()` to do the PCA, but it can also be performed in base R with the functions `prcomp()` and `princomp()`. `rda()` is the same function that we will use later for a Redundancy Analysis, but when used without specifying constraints (as we do here) it amounts to simply doing a PCA. Typically we standardise environmental data to unit variance, but the PCA done by the `rda()` function accomplishes this step automagically when `scale = TRUE`. When applied to environmental data (as we typically do with a PCA) it works with correlations amongst the scaled variables. PCA preserves Euclidean distance and the relationships detected are linear, and for this reason it is not typically applied to species data without suitable transformations. In fact, in this module we will seldom apply a PCA to species data at all.

```{r}
env_pca <- rda(env, scale = TRUE)
env_pca

# same ...
# env_std <- scale(env)
# env_pca <- rda(env_std, scale = FALSE)
# env_pca
```

In ordination we use the term **inertia** as a synonym for 'variation', but some PCA software (such as R's `prcomp()` and `princomp()`) simply uses the term `sdev` for standard deviations. In PCA, when we use a correlation matrix (as we do here), the inertia is the sum of the diagonal values of the correlation matrix, which is simply the number of variables (11 in this example). When a PCA uses a covariance matrix the inertia is the sum of the variances of the variables.

You will also see in the output the mention of the term '**unconstrained**'. In a PCA the analysis is always unconstrained (i.e. not influenced by some *a priori* defined variables we hypothesise to explain the between site patterns in the multivariate data).

The section headed **Eigenvalues for unconstrained axes** shows the relative importance of the resultant reduced axes, and they can be used to determine the proportion of the total inertia (sum of the eigenvalues) captured by any one of the axes. They can be accessed with the function `eigenvals()` (the preferred function; see `?rda` for help), but an alternative method is given below. The first eigenvalue (the one associated with PC1) always explains the most variation (the largest fraction), and each subsequent one explains the largest proportion of the **remaining** variance. We say the axes are **orthogonal** and ranked in decreasing order of importance. The sum of all eigenvalues is the total inertia, so collectively they theoretically can explain all of the variation in the dataset (but clearly they **should not** be used to explain **all** the variance). To extract the first eigenvalue we can do:

```{r}
round(eigenvals(env_pca)[1], 3)

# or

round(env_pca$CA$eig[1], 3)
```

The total inertia is:

```{r}
sum(eigenvals(env_pca))

# or

sum(env_pca$CA$eig)
```

So the proportion of variation explained by the first PC is:

```{r}
round(env_pca$CA$eig[1] / sum(env_pca$CA$eig) * 100, 1) # result in %
```

We can show the same information as part of a more verbose summary. Here we see the pre-calculated **Proportion Explained** and **Cumulative Proportion** (it should be obvious what this is). There is also an assortment of other information, viz. **Scaling 2 for species and site scores**, **Species scores**, and **Site scores**.

```{r}
summary(env_pca)
```

## Terminology

**Eigenvectors:** Eigenvectors are the directions in the original variable space along which the variance in the data is maximised. In **vegan**'s PCA, they are represented by `env_pca$CA$u`. Each eigenvector points in the direction of a principal component and defines its orientation in the multidimensional space. Eigenvectors define the principal component axes, and the species scores (see below) reveal how the original variables relate to those axes.

**Principal components:** Principal components are the new axes derived from the original data in PCA. They are linear combinations of the original variables that maximise the variance in the data. The number of principal components is equal to the number of original variables, and they are orthogonal (uncorrelated) to each other. The first principal component captures the most variance, with each subsequent component capturing progressively less. The principal components are represented in PCA by `env_pca$CA$v`.

**Species scores (loadings):** While eigenvectors are the directions of maximum variance, the species scores indicate the coordinates of the original variables on those directions. So, species scores, also known as loadings, represent the contributions of the original variables to the principal components. They indicate the strength and direction of the correlation between the original variables and the new principal components. Species scores are obtained with `scores(env_pca, display = "species")`. Larger positive values indicate a stronger positive correlation, while larger negative values indicate a stronger negative correlation. Even though the term "species scores" is used in the software, it refers to the loadings of the original variables (environmental variables in this case).

**Eigenvalues:** Eigenvalues represent the amount of variance explained by each corresponding eigenvector (or principal component), represented in PCA by `env_pca$CA$eig`. Higher eigenvalues indicate that the corresponding principal component explains a larger portion of the total variance in the data. The sum of all eigenvalues is equal to the total variance in the data.

**Projection:** 'Projection' is the process of mapping the original data points onto the new reduced axes (principal components). This aids in visualising the data and identifying patterns or clusters.


**Site scores:** Site scores represent the coordinates of the sites (or samples) in the reduced-dimensional space defined by the principal components. They are obtained by `scores(env_pca, display = "sites")` and are used to plot the positions of the sites in 2D or 3D ordination space. Sites that are further apart in this space differ more in terms of the environmental conditions, as determined by the major environmental gradients indicated by the species scores (loadings).

When interpreting a PCA biplot (see below), the species scores (loadings) indicate the contributions of the original variables to the principal components, while the site scores represent the positions of the sites in the reduced-dimensional space defined by those principal components. The direction and length of the species score vectors (arrows) provide information about the relationships between the original variables and the principal components, while the positions of the site points reflect the similarities or differences between sites based on the environmental gradients represented by the principal components.

<!-- It is customary to plot the Site and Species Scores as ordination diagrams called **biplots** for a few of the reduced axes. We will get to this below. -->

<!-- **Scaling 1** and **Scaling 2**, depending on what was specified in the `rda()` function call, are useful for whether one wants to interpret species (scaling 1) or variables (scaling 2). When calling Scaling 1, the distances between points plotted on the ordination diagram (i.e. the information in the rows, which in this case is sites) will retain their Euclidian distances, which allows for better interpretation of how sites relate to one-another. Calling Scaling 2 preserves more accurately the angles between variables (the columns, i.e. here we have environmental variables) with the consequence that in the biplot smaller angles between variable vectors will reflect stronger correlations. More on scaling below. -->

## How Many Axes to Retain?

The number of axes to retain is a difficult question to answer. The first few axes will always explain the most variation, but how do we know how many reduced axes are influential and should be kept? Commonly recommended is the **broken stick** method---keep the principal components whose eigenvalues are higher than corresponding random broken stick components:

```{r fig.height=4, fig.width=6}
#| fig.align: center
#| fig.cap: "Scree plot of the Doubs River environmental data PCA."
#| label: fig-pca-screeplot

# make a scree plot using the vegan function:
screeplot(env_pca, bstick = TRUE, type = "lines")
```

Or I can make a scree plot using **ggplot2**, which is more flexible:

```{r fig.height=3, fig.width=6 }
#| fig.align: center
#| fig.cap: "Scree plot of the Doubs River environmental data PCA made in **ggplot2**."
#| label: fig-pca-scree-ggplot

scree_dat <- data.frame(eigenvalue = as.vector(eigenvals(env_pca)),
                        bstick = bstick(env_pca))
scree_dat$axis <- rownames(scree_dat)
rownames(scree_dat) <- NULL
scree_dat <- scree_dat |> 
  mutate(axis = factor(axis, levels = paste0(rep("PC", 11), seq(1:11))))

ggplot(data = scree_dat, aes(x = axis, y = eigenvalue)) +
  geom_point() +
  geom_line(aes(group = 1)) +
  geom_point(aes(y = bstick), colour = "red") +
  geom_line(aes(y = bstick, group = 1), colour = "red") +
  labs(x = "Principal component", y = "Inertia")
```

In the plot, above, the red line is the broken stick components and the black line the eigenvalues for the different PCs. The plot suggests keeping the first two PC axes, which explain approximately 74% of the total inertia. See Numerical Ecology with R pp. 121-122 for more information about how to decide how many PCs to retain.

## Ordination Diagrams

<!-- ### Plots along one-dimension -->

<!-- Now I will construct some primitive graphs of the Site and Species Scores to demonstrate how to interpret the eigenvectors associated with each eigenvalue. We will typically not do this kind of graphical display---for plots suitable for publication see the [Biplots](../BCB743/08-pca/#biplots) section, below. -->

<!-- The first thing we need to do is extract the Species and Site Scores in a manner that makes them convenient for plotting. To do this, we can apply the `scores()` function to the PCA object, `env_pca`, and assign the output to tidied dataframes. The `scores()` function can tidy the data to some extent, but I make it even tidier in subsequent steps by creating long format data (rather than wide) using the `pivot_longer()` function. Various other bits of code lines accomplish additional restructuring of the data to make datasets that are fully compliant for creating the kind of figure I have in mind: -->

<!-- ```{r} -->
<!-- # species scores first by setting 'display' to species -->
<!-- # we are interested in all axes (PC1 to PC11) so set the 'choices' argument -->
<!-- # appropriately (see `?scores`): -->
<!-- spp_sc <- scores(env_pca, display = "species", choices = seq(1:11), tidy = TRUE) -->

<!-- # now pivot longer to make the data even tidier: -->
<!-- spp_sc <- spp_sc |>  -->
<!--   select(-score) |> # remove column -->
<!--   pivot_longer(cols = PC1:PC11, # pivot -->
<!--                names_to = "PC_axis", -->
<!--                values_to = "score") |>  -->
<!--   group_by(PC_axis) |>  -->
<!--   mutate(rank = rank(abs(score)), # rank absolute scores -->
<!--          origin = 0, # create a column for start of arrows -->
<!--          PC_axis = factor(PC_axis, levels = paste0(rep("PC", 11), seq(1:11)))) |>  -->
<!--   # above, reorder the factor levels so PC axis plot in right order -->
<!--   filter(rank >= 10) |> # keep only 2 higheest ranked scores -->
<!--   ungroup() -->

<!-- head(spp_sc) -->

<!-- # now the site scores: -->
<!-- site_sc <- scores(env_pca, display = "sites", choices = seq(1:11), tidy = TRUE) -->

<!-- site_sc <- site_sc |>  -->
<!--   select(-score) |>  -->
<!--   pivot_longer(cols = PC1:PC11, -->
<!--                names_to = "PC_axis", -->
<!--                values_to = "score") |>  -->
<!--   mutate(label = as.numeric(label), -->
<!--          PC_axis = factor(PC_axis, levels = paste0(rep("PC", 11), seq(1:11)))) -->

<!-- head(site_sc) -->
<!-- ``` -->

<!-- ```{r} -->
<!-- # var explained along PC1, PC2, and PC3 for adding to plot: -->
<!-- PC1_var <- round(env_pca$CA$eig[1] / sum(env_pca$CA$eig) * 100, 1) -->
<!-- PC2_var <- round(env_pca$CA$eig[2] / sum(env_pca$CA$eig) * 100, 1) -->
<!-- PC3_var <- round(env_pca$CA$eig[3] / sum(env_pca$CA$eig) * 100, 1) -->
<!-- ``` -->

<!-- Now we can assemble a plot, and in it focus on the first two PCs. It seems somewhat complex, but the code can easily be deciphered if you read through it 'layer-by-layer': -->

<!-- ```{r} -->
<!-- #| fig-width: 8 -->
<!-- #| fig-height: 6 -->
<!-- library(ggrepel) -->
<!-- #| fig.align: center -->
<!-- #| fig.cap: "Ordination plot of the Doubs River environmental data showing only the influence of the first principal component." -->
<!-- #| label: fig-pca-linear -->

<!-- ggplot(data = site_sc, aes(x = PC_axis, y = score)) + -->
<!--   geom_hline(aes(yintercept = 0), linetype = "dashed") + -->
<!--   geom_jitter(shape = 19, width = 0.09, aes(colour = label)) + -->
<!--   scale_colour_viridis_c(name = "Site no.") + -->
<!--   geom_segment(data = spp_sc, aes(x = PC_axis, y = origin, -->
<!--                                   xend = PC_axis, yend = score), -->
<!--                lineend = "butt", -->
<!--                arrow = arrow(length = unit(3, "mm"), -->
<!--                              type = "open", -->
<!--                              angle = 30), -->
<!--                alpha = 0.8, size = 0.7, colour = "red") + -->
<!--   geom_text_repel(data = spp_sc, aes(label = label), size = 3.0, -->
<!--                   direction = "y", colour = "red") + -->
<!--   annotate(geom = "text", x = 1, y = -2.5, size = 3.0, colour = "red", -->
<!--            label = paste0(PC1_var, "% var. expl.")) + -->
<!--   annotate(geom = "text", x = 2, y = -2.5, size = 3.0, colour = "red", -->
<!--            label = paste0(PC2_var, "% var. expl.")) + -->
<!--   annotate(geom = "text", x = 3, y = -2.5, size = 3.0, colour = "red", -->
<!--            label = paste0(PC3_var, "% var. expl.")) + -->
<!--   coord_flip() + -->
<!--   labs(x = NULL, y = "Score") + -->
<!--   theme( -->
<!--     panel.grid.major.x = element_blank(), -->
<!--     panel.grid.minor.x = element_blank(), -->
<!--     panel.grid.major.y = element_line(colour = "pink", linetype = "dashed"), -->
<!--     legend.position = c(0.075, 0.75), -->
<!--     legend.box.background = element_rect(colour = "black") -->
<!--   ) -->
<!-- ``` -->

<!-- Although you will never see a graph like this one, examining it is nevertheless informative. What I did was: -->

<!-- * **plot all new PC axes on the vertical axis**; they represent the reduced, simplified ecological space; these PC axes are ranked from most important (PC1) to least important (PC11)---and each one's ability to explain some property of the environment is ranked by the magnitude of their eigenvalues -->
<!-- * PC1 explains 54.3% of the total variation in the environmental dataset -->
<!-- * PC2 explains an additional 19.7% of the remaining variance left over after accounting for the influence of PC1 -->
<!-- * the cumulative % variance explained by PC1 and PC2 is 74% -->
<!-- * for each PC axis I plot -->
<!-- * the **Site scores as coloured points** -->
<!-- * the colours indicate the sampled sites' numbers -->
<!-- * the points indicate the spread of the sites across linear Euclidian space with respect to the main environmental gradients represented by each PC axis -->
<!-- * the **Species scores as arrows** -->
<!-- * I only plot the top two most heavily loaded absolute eigenvectors -->
<!-- * the main environmental gradients are represented by the arrows -->
<!-- * the gradient represented is annotated by text giving the name of the environmental variables -->
<!-- * the location of the arrow heads is located in Euclidian space at the coordinates provided by the Species scores -->
<!-- * the longer the arrow, the more influence it has on causing the sites to spread out in Euclidian space -->
<!-- * the arrows point in the direction where the magnitude of the environmental variable is greater, and in the opposite direction the magnitude of the variable is less; for example, sites are spread out along PC1 primarily due to the influence of the variables nitrate and distance from source such that the sites further down the river (more yellow) tend to have a higher nitrate concentration and have a larger distance from source, and sites closer to the source (more blue) have a smaller distance from source and lower nitrate concentration. -->

Ordination analyses are typically presented through graphical representations called ordination diagrams, which provide a simplified visual summary of the relationships between samples (the rows), species (columns), and environmental variables (also columns) in multivariate ecological data.

1. Basic Elements of Ordination Diagrams:

    a) Sample Representation:

        - Individual samples or plots (rows) are displayed as points or symbols.
        - The relative positions of these points reflect the similarity (points plotting closer together) or dissimilarity (points spread further apart) between samples based on their species composition.

    b) Species Representation:

        - In linear methods (e.g., PCA, RDA): Species are represented by arrows, with direction indicating increasing abundance and length suggesting rate of change.
        - In weighted averaging methods (e.g., CA, CCA): Species are shown as points, representing their optimal position (often suggesting a unimodal distribution).

    c) Environmental Variable Representation:

        - Quantitative Variables: Displayed as vectors, with the arrows' direction showing the gradient of increasing values and length indicating correlation strength with ordination axes.
        - Qualitative Variables: Represented by centroids (average positions) for each category.

2. Construction of the Ordination Space:

    - The coordinates given by the eigenvectors (species and site scores) are displayed on a 2D plane, typically using PC1 and PC2 (or PC1 and PC3, etc.) as axes.
    - This creates a biplot, simultaneously plotting sites as points and environmental variables as vectors.
    - The loadings (coefficients of original variables) define the reduced-space 'landscape' across which sites are scattered.

3. Interpretation of the Diagram:

    a) Sample Relationships:

        - Proximity between sample points indicates similarity in species composition.
        - The spread of sites along environmental arrows represents their position along that gradient.

    b) Species-Environment Relationships:

        - The angle between species arrows or their distance from sample points reflects association or abundance patterns.
        - The arrangement of sites in the reduced ordination space represents their relative positions in the original multidimensional space.

    c) Environmental Gradients:

        - Arrow length indicates the strength of the relationship between the variable and the principal component.
        - The cosine of the angle between arrows represents the correlation between environmental variables.
        - Parallel arrows suggest positive correlation, opposite arrows indicate negative correlation, and perpendicular arrows suggest uncorrelated variables.

4. Additional Considerations:

    a) Scaling: Different scaling options (e.g., site scaling vs. species scaling) can emphasise different aspects of the data.
    b) Statistical Significance: Biplots are hueristic tools and patterns should be further tested for statistical significance if necessary.
    c) Outliers: Can greatly influence the ordination and should be carefully examined.

5. Visualisation:

- Default plot options use base graphics, but more advanced visualisations can be created using **ggplot2**.
   
I provide some examples scattered throughout the course content (e.g. [here](/quantecol/chapters/pca_examples/#a-ggplot-biplot)), but you may also refer to the step-by-step walk throughs provided by [Roeland Kindt](https://rpubs.com/Roeland-KINDT/694016). Also see David ZelenÃ½'s [excellent writing on the topic](https://www.davidzeleny.net/anadat-r/doku.php/en:ordiagrams).

Let us look at examples. In a PCA ordination diagram, following the tradition of scatter diagrams in Cartesian coordinate systems, objects are represented as points and variables are displayed as arrows. We first use the standard **vegan** `biplot()` function:

```{r}
#| fig-width: 10
#| fig-height: 5.625 
#| fig.align: center
#| fig.cap: "Ordination plot of the Doubs River environmental data showing site scaling (left) and species scaling (right)."
#| label: fig-pca-biplots

opar <- par(no.readonly = TRUE)
par(mfrow = c(1, 2))
biplot(env_pca, scaling = 1, main = "PCA scaling 1", choices = c(1, 2))
biplot(env_pca, scaling = 2, main = "PCA scaling 2", choices = c(1, 2))
par(opar)
```

## Scaling

**Scaling 1:** This scaling *emphasises relationships between rows* accurately in low-dimensional ordination space. Distances among objects (samples or sites) in the biplot are approximations of their Euclidian distances in multidimensional space. Objects positioned further apart show a greater degree of environmental dissimilarity. The angles among descriptor vectors should not be interpreted as indicating the degree of correlation between the variables.

**Scaling 2:** This scaling *emphasises relationships between columns* accurately in low-dimensional ordination space. Distances among objects (samples or sites) in the biplot are not approximations of their Euclidian distances in multidimensional space. The angles among descriptor vectors can be interpreted as indicating the degree of correlation between the variables.

Now we create biplots using the `cleanplot.pca()` function that comes with the *Numerical Ecology in R* book. The figures are more or less the same, except the plot showing the Site scores with Scaling 1 adds a 'circle of equilibrium contribution' (see Numerical Ecolology with R, p. 125). The circle of equilibrium contribution is a visual aid drawn on a biplot to help assess the relative importance of species (or variables) in the ordination space. It's most useful in PCA biplots using scaling 1, where the focus is on species relationships. The circle is not a formal statistical test. It helps us to quickly identify the most important variables or species, but it doesn't directly indicate statistical significance.

We only assign importance to the arrows that extend beyond the radius of the circle (@fig-pca-cleanplot):

```{r}
#| fig-width: 10
#| fig-height: 5.625 
#| fig.align: center
#| fig.cap: "Ordination plot of the Doubs River environmental data made with the `cleanplot.pca()` function."
#| label: fig-pca-cleanplot

# we need to load the function first from its R file:
source("../data/NEwR-2ed_code_data/NEwR2-Functions/cleanplot.pca.R")
cleanplot.pca(env_pca, scaling = 1)
```

**At this point it is essential that you refer to *Numerical Ecology in R* (pp. 118 to 126) for help with interpreting the ordination diagrams.**

## Fitting Environmental Response Surfaces

The `ordisurf()` function in **vegan** is used to visualise underlying environmental gradients on an ordination plot. This function fits a smooth surface (usually a generalised additive model GAM fitted to the site scores of PC axes of interest) to the ordination plot based on a specified environmental variable. It highlights how that variable changes across the ordination space so that we may interpret the spatial structure of the data in relation to the environmental gradient more easily.

For more about `ordisurf()`, see Gavin Simpson's blog post [What is `ordifurf()` doing?](https://fromthebottomoftheheap.net/2011/06/10/what-is-ordisurf-doing/).

We plot the response surfaces for elevation and biological oxygen demand:

```{r}
#| message: false
#| warning: false
#| fig-width: 10
#| fig-height: 5.625 
#| fig.align: center
#| fig.cap: "Ordination plot of the Doubs River environmental data fitted with a smooth response surface for elevation and biological oxygen demand."
#| label: fig-pca-ordisurf

biplot(env_pca, type = c("text", "points"), col = c("black", "black"))
invisible(ordisurf(env_pca ~ bod, env, add = TRUE, col = "turquoise", knots = 1)) # <1>
invisible(ordisurf(env_pca ~ ele, env, add = TRUE, col = "salmon", knots = 1))
```
1. `invisible()` is used to suppress the output of the `ordisurf()` function; only the figure is returned.

PCA does well as simpifying multidimensional data, but it has important limitations when applied to ecological community data due to its linear assumptions. In PCA biplots, environmental gradient contours form linear trend surfaces perpendicular to their vectors (@fig-pca-ordisurf), reflecting the method's inherent linearity. However, ecological data and environmental gradients are typically non-linear, with species exhibiting complex, unimodal responses to environmental factors. This mismatch can lead to oversimplified and misleading interpretations. Consequently, PCA is generally not recommended for community data analysis. Instead, alternative ordination methods like Correspondence Analysis (CA), Canonical Correspondence Analysis (CCA), and non-metric Multidimensional Scaling (nMDS) are preferred, as they better capture the non-linear relationships and provide more ecologically meaningful insights.

## References

Graham, M. H. (2003). Confronting multicollinearity in ecological multiple regression. Ecology 84, 2809--2815.

